# CONFIGURAÇÕES DE DEPLOY E PRODUÇÃO

## 🚀 DEPLOY NO VERCEL (RECOMENDADO)

### 1. Preparação do Projeto:

#### package.json - Scripts:
```json
{
  "name": "sistema-feedback",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "type-check": "tsc --noEmit"
  },
  "dependencies": {
    "next": "15.5.2",
    "react": "^18",
    "react-dom": "^18",
    "typescript": "^5",
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "framer-motion": "^11.0.0",
    "lucide-react": "^0.263.1",
    "pg": "^8.11.0",
    "@types/pg": "^8.10.0",
    "recharts": "^3.2.1",
    "tailwindcss": "^3.3.0",
    "autoprefixer": "^10.0.1",
    "postcss": "^8",
    "eslint": "^8",
    "eslint-config-next": "15.5.2",
    "@radix-ui/react-tabs": "^1.1.13",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-button": "^1.1.0",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.0.0",
    "tailwind-merge": "^2.0.0"
  }
}
```

#### next.config.js - Otimizado:
```javascript
/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    optimizePackageImports: ['lucide-react', 'framer-motion', 'recharts'],
    turbo: {
      rules: {
        '*.svg': {
          loaders: ['@svgr/webpack'],
          as: '*.js',
        },
      },
    },
  },
  images: {
    formats: ['image/webp', 'image/avif'],
    deviceSizes: [640, 750, 828, 1080, 1200, 1920, 2048, 3840],
    imageSizes: [16, 32, 48, 64, 96, 128, 256, 384],
  },
  compress: true,
  poweredByHeader: false,
  generateEtags: false,
  swcMinify: true,
  env: {
    CUSTOM_KEY: process.env.CUSTOM_KEY,
  },
  async headers() {
    return [
      {
        source: '/api/:path*',
        headers: [
          { key: 'Access-Control-Allow-Origin', value: '*' },
          { key: 'Access-Control-Allow-Methods', value: 'GET, POST, PUT, DELETE, OPTIONS' },
          { key: 'Access-Control-Allow-Headers', value: 'Content-Type, Authorization' },
        ],
      },
    ];
  },
};

module.exports = nextConfig;
```

### 2. Configuração Vercel:

#### vercel.json:
```json
{
  "version": 2,
  "builds": [
    {
      "src": "package.json",
      "use": "@vercel/next"
    }
  ],
  "routes": [
    {
      "src": "/api/(.*)",
      "dest": "/api/$1"
    }
  ],
  "env": {
    "PGUSER": "@pguser",
    "PGPASSWORD": "@pgpassword",
    "PGHOST": "@pghost",
    "PGPORT": "@pgport",
    "PGDATABASE": "@pgdatabase"
  },
  "functions": {
    "app/api/pesquisa/route.ts": {
      "maxDuration": 30
    }
  }
}
```

#### Comandos de Deploy:
```bash
# 1. Instalar Vercel CLI
npm i -g vercel

# 2. Login na Vercel
vercel login

# 3. Configurar projeto
vercel

# 4. Configurar variáveis de ambiente
vercel env add PGUSER production
vercel env add PGPASSWORD production
vercel env add PGHOST production
vercel env add PGPORT production
vercel env add PGDATABASE production

# 5. Deploy para produção
vercel --prod
```

### 3. Banco de Dados em Produção:

#### Opção 1 - Neon (PostgreSQL Serverless):
```bash
# 1. Criar conta em neon.tech
# 2. Criar novo projeto
# 3. Copiar connection string
# 4. Configurar variáveis:

PGUSER=neon_user
PGPASSWORD=sua_senha_neon
PGHOST=ep-xxx-xxx.us-east-1.aws.neon.tech
PGPORT=5432
PGDATABASE=neondb
```

#### Opção 2 - Supabase:
```bash
# 1. Criar projeto em supabase.com
# 2. Ir em Settings > Database
# 3. Copiar credenciais
# 4. Configurar variáveis:

PGUSER=postgres
PGPASSWORD=sua_senha_supabase
PGHOST=db.xxx.supabase.co
PGPORT=5432
PGDATABASE=postgres
```

#### Opção 3 - Railway:
```bash
# 1. Criar conta em railway.app
# 2. Criar PostgreSQL service
# 3. Copiar variáveis de ambiente
# 4. Configurar no Vercel
```

### 4. Script de Inicialização do Banco:

#### init-db.sql:
```sql
-- Executar este script no banco de produção

-- Criar tabelas
CREATE TABLE IF NOT EXISTS empresas (
    id SERIAL PRIMARY KEY,
    nome VARCHAR(255) NOT NULL,
    responsavel VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS pesquisas (
    id SERIAL PRIMARY KEY,
    empresa_id INTEGER REFERENCES empresas(id) ON DELETE CASCADE,
    nps INTEGER NOT NULL CHECK (nps >= 0 AND nps <= 10),
    quer_indicar BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS avaliacoes (
    id SERIAL PRIMARY KEY,
    pesquisa_id INTEGER REFERENCES pesquisas(id) ON DELETE CASCADE,
    area VARCHAR(100) NOT NULL,
    nota INTEGER NOT NULL CHECK (nota >= 0 AND nota <= 5),
    nao_se_aplica BOOLEAN DEFAULT FALSE,
    feedback_positivo TEXT DEFAULT '',
    feedback_melhoria TEXT DEFAULT '',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS indicacoes (
    id SERIAL PRIMARY KEY,
    pesquisa_id INTEGER REFERENCES pesquisas(id) ON DELETE CASCADE,
    nome VARCHAR(255) NOT NULL,
    empresa VARCHAR(255) NOT NULL,
    email VARCHAR(255),
    telefone VARCHAR(20),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Criar índices
CREATE INDEX IF NOT EXISTS idx_pesquisas_empresa_id ON pesquisas(empresa_id);
CREATE INDEX IF NOT EXISTS idx_pesquisas_created_at ON pesquisas(created_at);
CREATE INDEX IF NOT EXISTS idx_pesquisas_nps ON pesquisas(nps);
CREATE INDEX IF NOT EXISTS idx_avaliacoes_pesquisa_id ON avaliacoes(pesquisa_id);
CREATE INDEX IF NOT EXISTS idx_avaliacoes_area ON avaliacoes(area);
CREATE INDEX IF NOT EXISTS idx_avaliacoes_nota ON avaliacoes(nota);
CREATE INDEX IF NOT EXISTS idx_indicacoes_pesquisa_id ON indicacoes(pesquisa_id);
CREATE INDEX IF NOT EXISTS idx_empresas_created_at ON empresas(created_at);

-- Índices compostos para performance
CREATE INDEX IF NOT EXISTS idx_empresas_created_at_date ON empresas(DATE(created_at));
CREATE INDEX IF NOT EXISTS idx_pesquisas_empresa_nps ON pesquisas(empresa_id, nps);
CREATE INDEX IF NOT EXISTS idx_avaliacoes_area_nota ON avaliacoes(area, nota) WHERE nao_se_aplica = false;
```

## 🔧 CONFIGURAÇÕES DE PERFORMANCE

### 1. Otimizações Next.js:

#### middleware.ts (opcional):
```typescript
import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';

export function middleware(request: NextRequest) {
  // Rate limiting básico
  const ip = request.ip ?? '127.0.0.1';
  
  // Adicionar headers de segurança
  const response = NextResponse.next();
  
  response.headers.set('X-Frame-Options', 'DENY');
  response.headers.set('X-Content-Type-Options', 'nosniff');
  response.headers.set('Referrer-Policy', 'origin-when-cross-origin');
  
  return response;
}

export const config = {
  matcher: [
    '/((?!api|_next/static|_next/image|favicon.ico).*)',
  ],
};
```

### 2. Configuração de Cache:

#### app/layout.tsx - Headers:
```typescript
export const metadata = {
  title: 'Sistema de Feedback - Venturini&Co',
  description: 'Sistema de pesquisa de satisfação',
  robots: 'noindex, nofollow', // Para admin
};

export const revalidate = 3600; // Cache por 1 hora
```

### 3. Monitoramento:

#### app/api/health/route.ts:
```typescript
import { pool } from '@/lib/db';

export async function GET() {
  try {
    const client = await pool.connect();
    const result = await client.query('SELECT NOW()');
    client.release();
    
    return Response.json({
      status: 'healthy',
      timestamp: new Date().toISOString(),
      database: 'connected',
      uptime: process.uptime(),
      memory: process.memoryUsage(),
      version: process.version
    });
  } catch (error) {
    return Response.json({
      status: 'unhealthy',
      error: 'Database connection failed',
      timestamp: new Date().toISOString()
    }, { status: 500 });
  }
}
```

## 📊 ANALYTICS E MONITORAMENTO

### 1. Vercel Analytics:
```bash
npm install @vercel/analytics
```

```typescript
// app/layout.tsx
import { Analytics } from '@vercel/analytics/react';

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="pt-BR">
      <body>
        {children}
        <Analytics />
      </body>
    </html>
  );
}
```

### 2. Error Tracking:
```typescript
// lib/logger.ts
export const logger = {
  info: (message: string, data?: any) => {
    if (process.env.NODE_ENV === 'production') {
      // Enviar para serviço de log (ex: Sentry)
      console.log(`[INFO] ${new Date().toISOString()}: ${message}`, data);
    } else {
      console.log(`[INFO] ${message}`, data);
    }
  },
  error: (message: string, error?: any) => {
    if (process.env.NODE_ENV === 'production') {
      // Enviar para serviço de erro
      console.error(`[ERROR] ${new Date().toISOString()}: ${message}`, error);
    } else {
      console.error(`[ERROR] ${message}`, error);
    }
  }
};
```

## 🔒 SEGURANÇA EM PRODUÇÃO

### 1. Variáveis de Ambiente Seguras:
```env
# .env.production (não commitar)
PGUSER=usuario_producao
PGPASSWORD=senha_super_segura_123!
PGHOST=seu-host-producao.com
PGPORT=5432
PGDATABASE=sistema_feedback_prod

# Chaves de API (se necessário)
NEXT_PUBLIC_API_URL=https://seu-dominio.com
ADMIN_SECRET_KEY=chave_admin_super_secreta
```

### 2. Rate Limiting:
```typescript
// lib/rateLimit.ts
const requests = new Map();

export function rateLimit(identifier: string, limit = 100, window = 15 * 60 * 1000) {
  const now = Date.now();
  const windowStart = now - window;
  
  if (!requests.has(identifier)) {
    requests.set(identifier, []);
  }
  
  const userRequests = requests.get(identifier);
  const recentRequests = userRequests.filter((time: number) => time > windowStart);
  
  if (recentRequests.length >= limit) {
    return false;
  }
  
  recentRequests.push(now);
  requests.set(identifier, recentRequests);
  
  return true;
}
```

## 📈 OTIMIZAÇÕES DE PERFORMANCE

### 1. Bundle Analysis:
```bash
npm install --save-dev @next/bundle-analyzer
```

```javascript
// next.config.js
const withBundleAnalyzer = require('@next/bundle-analyzer')({
  enabled: process.env.ANALYZE === 'true',
});

module.exports = withBundleAnalyzer({
  // ... outras configurações
});
```

### 2. Lighthouse Score Target:
- **Performance**: > 90
- **Accessibility**: > 95
- **Best Practices**: > 90
- **SEO**: > 85

### 3. Core Web Vitals:
- **LCP** (Largest Contentful Paint): < 2.5s
- **FID** (First Input Delay): < 100ms
- **CLS** (Cumulative Layout Shift): < 0.1

## ✅ CHECKLIST DE DEPLOY

### Pré-Deploy:
- [ ] Testes locais passando
- [ ] Build sem erros (`npm run build`)
- [ ] Type checking ok (`npm run type-check`)
- [ ] Lint sem erros (`npm run lint`)
- [ ] Variáveis de ambiente configuradas
- [ ] Banco de dados de produção configurado

### Deploy:
- [ ] Deploy realizado com sucesso
- [ ] Health check funcionando (`/api/health`)
- [ ] Páginas carregando corretamente
- [ ] APIs respondendo
- [ ] Dashboard admin acessível
- [ ] Formulário de pesquisa funcionando

### Pós-Deploy:
- [ ] Monitoramento ativo
- [ ] Logs sendo coletados
- [ ] Performance verificada
- [ ] Backup do banco configurado
- [ ] SSL/HTTPS ativo
- [ ] DNS configurado

## 🎯 RESULTADO ESPERADO

Um sistema em produção com:
- ✅ Alta performance (> 90 Lighthouse)
- ✅ Segurança robusta
- ✅ Monitoramento ativo
- ✅ Backup automático
- ✅ Escalabilidade
- ✅ Disponibilidade 99.9%

**Status**: Sistema pronto para produção ✅
