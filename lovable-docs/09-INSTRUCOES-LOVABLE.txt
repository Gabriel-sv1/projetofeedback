# GUIA COMPLETO PARA RECRIAR NO LOVABLE

## üéØ RESUMO EXECUTIVO

Este √© um **Sistema de Feedback Completo** desenvolvido em Next.js 15 com:
- ‚úÖ Interface p√∫blica de pesquisa em 3 etapas
- ‚úÖ Dashboard administrativo com filtros avan√ßados por data
- ‚úÖ 4 abas no admin: Vis√£o Geral, Timeline, Avalia√ß√£o por √Årea, Pesquisas Recentes
- ‚úÖ Banco PostgreSQL com 4 tabelas relacionadas
- ‚úÖ Gr√°ficos interativos (Recharts)
- ‚úÖ Sistema de feedback condicional
- ‚úÖ Anima√ß√µes e otimiza√ß√µes de performance
- ‚úÖ Design responsivo profissional

## üöÄ PASSO-A-PASSO PARA LOVABLE

### ETAPA 1: CONFIGURA√á√ÉO INICIAL

#### 1.1 Criar Projeto Next.js 15:
```bash
npx create-next-app@latest sistema-feedback --typescript --tailwind --eslint --app
cd sistema-feedback
```

#### 1.2 Instalar Depend√™ncias:
```bash
# Depend√™ncias principais
npm install framer-motion lucide-react recharts pg @types/pg

# Componentes UI (shadcn/ui)
npm install @radix-ui/react-tabs @radix-ui/react-label @radix-ui/react-button
npm install @radix-ui/react-select @radix-ui/react-dialog
npm install class-variance-authority clsx tailwind-merge

# Utilit√°rios
npm install date-fns
```

#### 1.3 Configurar shadcn/ui:
```bash
npx shadcn-ui@latest init
npx shadcn-ui@latest add button card input label tabs select dialog
```

### ETAPA 2: ESTRUTURA DE PASTAS

Criar a seguinte estrutura:
```
app/
‚îú‚îÄ‚îÄ admin/
‚îÇ   ‚îî‚îÄ‚îÄ page.tsx              # Dashboard administrativo
‚îú‚îÄ‚îÄ api/
‚îÇ   ‚îú‚îÄ‚îÄ export/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ route.ts          # API exporta√ß√£o CSV
‚îÇ   ‚îî‚îÄ‚îÄ pesquisa/
‚îÇ       ‚îî‚îÄ‚îÄ route.ts          # API principal (GET/POST)
‚îú‚îÄ‚îÄ globals.css               # Estilos globais
‚îú‚îÄ‚îÄ layout.tsx                # Layout principal
‚îî‚îÄ‚îÄ page.tsx                  # P√°gina da pesquisa

components/
‚îú‚îÄ‚îÄ optimized/
‚îÇ   ‚îú‚îÄ‚îÄ LazyImage.tsx         # Componente imagem lazy
‚îÇ   ‚îî‚îÄ‚îÄ OptimizedForm.tsx     # Formul√°rio otimizado
‚îî‚îÄ‚îÄ ui/                       # Componentes shadcn/ui

lib/
‚îú‚îÄ‚îÄ db.ts                     # Configura√ß√£o PostgreSQL
‚îî‚îÄ‚îÄ utils.ts                  # Utilit√°rios (cn, clsx)

hooks/
‚îî‚îÄ‚îÄ use-mobile.ts             # Hook detec√ß√£o mobile
```

### ETAPA 3: BANCO DE DADOS POSTGRESQL

#### 3.1 Criar Banco e Tabelas:
```sql
-- Criar banco
CREATE DATABASE sistema_feedback;
\c sistema_feedback;

-- Tabela empresas
CREATE TABLE empresas (
    id SERIAL PRIMARY KEY,
    nome VARCHAR(255) NOT NULL,
    responsavel VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tabela pesquisas
CREATE TABLE pesquisas (
    id SERIAL PRIMARY KEY,
    empresa_id INTEGER REFERENCES empresas(id) ON DELETE CASCADE,
    nps INTEGER NOT NULL CHECK (nps >= 0 AND nps <= 10),
    quer_indicar BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tabela avaliacoes
CREATE TABLE avaliacoes (
    id SERIAL PRIMARY KEY,
    pesquisa_id INTEGER REFERENCES pesquisas(id) ON DELETE CASCADE,
    area VARCHAR(100) NOT NULL,
    nota INTEGER NOT NULL CHECK (nota >= 0 AND nota <= 5),
    nao_se_aplica BOOLEAN DEFAULT FALSE,
    feedback_positivo TEXT DEFAULT '',
    feedback_melhoria TEXT DEFAULT '',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tabela indicacoes
CREATE TABLE indicacoes (
    id SERIAL PRIMARY KEY,
    pesquisa_id INTEGER REFERENCES pesquisas(id) ON DELETE CASCADE,
    nome VARCHAR(255) NOT NULL,
    empresa VARCHAR(255) NOT NULL,
    email VARCHAR(255),
    telefone VARCHAR(20),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- √çndices para performance
CREATE INDEX idx_pesquisas_empresa_id ON pesquisas(empresa_id);
CREATE INDEX idx_pesquisas_created_at ON pesquisas(created_at);
CREATE INDEX idx_avaliacoes_pesquisa_id ON avaliacoes(pesquisa_id);
CREATE INDEX idx_empresas_created_at ON empresas(created_at);
```

#### 3.2 Configurar Conex√£o (lib/db.ts):
```typescript
import { Pool } from 'pg';

const pool = new Pool({
  user: process.env.PGUSER,
  host: process.env.PGHOST || 'localhost',
  database: process.env.PGDATABASE,
  password: process.env.PGPASSWORD,
  port: parseInt(process.env.PGPORT || '5432'),
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,
  max: 20,
  idleTimeoutMillis: 30000,
  connectionTimeoutMillis: 2000,
});

export { pool };
```

### ETAPA 4: P√ÅGINA PRINCIPAL (app/page.tsx)

#### 4.1 Funcionalidades Principais:
- **3 Etapas**: Dados empresa + NPS ‚Üí Avalia√ß√£o √°reas ‚Üí Indica√ß√µes
- **Indicador de Progresso**: C√≠rculos 1-2-3 centralizados
- **NPS Selector**: Bot√µes 0-10 com anima√ß√£o especial para nota 10
- **6 √Åreas**: Atendimento, Gest√£o de Tr√°fego, Design, Copywriting, Tecnologia, Vendas
- **Feedback Condicional**: 
  - Notas 1-4: Campo obrigat√≥rio de melhorias (vermelho)
  - Nota 5: Campo obrigat√≥rio de pontos positivos (verde)

#### 4.2 Interface FormData:
```typescript
interface FormData {
  empresa: string;
  responsavel: string;
  nps: number | null;
  querIndicar: boolean;
  indicacoes: Array<{
    nome: string;
    empresa: string;
    email: string;
    telefone: string;
  }>;
  avaliacoes: {
    [key: string]: {
      nota: number;
      naoSeAplica: boolean;
      feedbackPositivo: string;
      feedbackMelhoria: string;
    };
  };
}
```

### ETAPA 5: DASHBOARD ADMIN (app/admin/page.tsx)

#### 5.1 Sistema de Login:
- Senha: "venturini2024"
- Interface centralizada
- Valida√ß√£o de acesso

#### 5.2 Filtros por Data:
- Campos in√≠cio/fim personalizados
- Bot√µes r√°pidos: 7, 30, 90 dias, este ano
- Valida√ß√£o de datas

#### 5.3 Cards de M√©tricas:
- Total de Pesquisas
- NPS M√©dio
- Score NPS (% Promotores - % Detratores)
- Promotores (notas 9-10)

#### 5.4 Sistema de Abas (4):
1. **Vis√£o Geral**: Gr√°fico pizza distribui√ß√£o NPS + resumo
2. **Timeline**: Gr√°fico linha evolu√ß√£o temporal
3. **Avalia√ß√£o por √Årea**: Gr√°fico barras + cards por √°rea
4. **Pesquisas Recentes**: Tabela com badges coloridos

### ETAPA 6: APIs (app/api/pesquisa/route.ts)

#### 6.1 POST - Salvar Pesquisa:
```typescript
export async function POST(request: Request) {
  const data = await request.json();
  const { empresa, responsavel, nps, querIndicar, avaliacoes, indicacoes } = data;

  const client = await pool.connect();
  try {
    await client.query('BEGIN');
    
    // 1. Inserir empresa
    const empresaResult = await client.query(
      'INSERT INTO empresas (nome, responsavel) VALUES ($1, $2) RETURNING id',
      [empresa, responsavel]
    );
    const empresaId = empresaResult.rows[0].id;

    // 2. Inserir pesquisa
    const pesquisaResult = await client.query(
      'INSERT INTO pesquisas (empresa_id, nps, quer_indicar) VALUES ($1, $2, $3) RETURNING id',
      [empresaId, nps, querIndicar]
    );
    const pesquisaId = pesquisaResult.rows[0].id;

    // 3. Inserir avalia√ß√µes
    for (const [area, avaliacao] of Object.entries(avaliacoes)) {
      await client.query(
        `INSERT INTO avaliacoes (pesquisa_id, area, nota, nao_se_aplica, 
         feedback_positivo, feedback_melhoria) VALUES ($1, $2, $3, $4, $5, $6)`,
        [pesquisaId, area, avaliacao.nota, avaliacao.naoSeAplica, 
         avaliacao.feedbackPositivo, avaliacao.feedbackMelhoria]
      );
    }

    // 4. Inserir indica√ß√µes
    for (const indicacao of indicacoes) {
      await client.query(
        `INSERT INTO indicacoes (pesquisa_id, nome, empresa, email, telefone) 
         VALUES ($1, $2, $3, $4, $5)`,
        [pesquisaId, indicacao.nome, indicacao.empresa, 
         indicacao.email, indicacao.telefone]
      );
    }

    await client.query('COMMIT');
    return Response.json({ success: true });
  } catch (error) {
    await client.query('ROLLBACK');
    return Response.json({ error: 'Erro ao salvar' }, { status: 500 });
  } finally {
    client.release();
  }
}
```

#### 6.2 GET - Dados Dashboard:
Retorna stats, pesquisas, areas e timeline com suporte a filtros por data.

### ETAPA 7: ESTILOS E DESIGN

#### 7.1 Configurar Tailwind (tailwind.config.ts):
```typescript
export default {
  content: ['./app/**/*.{js,ts,jsx,tsx}', './components/**/*.{js,ts,jsx,tsx}'],
  theme: {
    extend: {
      colors: {
        primary: {
          800: '#1e293b',
          900: '#0f172a',
        },
        success: '#10b981',
        warning: '#f59e0b',
        error: '#ef4444',
      },
      animation: {
        'celebrate': 'celebrate 3s ease-in-out',
      }
    },
  },
}
```

#### 7.2 Estilos Globais (app/globals.css):
```css
@tailwind base;
@tailwind components;
@tailwind utilities;

@keyframes celebrate {
  0% { transform: scale(1.1); }
  25% { transform: scale(1.3) rotate(10deg); }
  50% { transform: scale(1.2) rotate(-5deg); }
  75% { transform: scale(1.25) rotate(5deg); }
  100% { transform: scale(1.1); }
}

.glass {
  background: rgba(255, 255, 255, 0.8);
  backdrop-filter: blur(10px);
  border: 1px solid rgba(255, 255, 255, 0.2);
}
```

### ETAPA 8: OTIMIZA√á√ïES DE PERFORMANCE

#### 8.1 Lazy Loading:
```typescript
import dynamic from 'next/dynamic';

const HeavyChart = dynamic(() => import('./HeavyChart'), {
  loading: () => <div className="animate-pulse bg-gray-200 h-64 rounded" />,
  ssr: false
});
```

#### 8.2 Memoiza√ß√£o:
```typescript
const MemoizedComponent = React.memo(({ data }) => {
  const processedData = useMemo(() => {
    return data.map(item => ({ ...item, processed: true }));
  }, [data]);

  return <div>{/* render */}</div>;
});
```

### ETAPA 9: DEPLOY

#### 9.1 Vari√°veis de Ambiente (.env.local):
```env
PGUSER=seu_usuario
PGPASSWORD=sua_senha
PGHOST=localhost
PGPORT=5432
PGDATABASE=sistema_feedback
```

#### 9.2 Vercel Deploy:
```bash
npm i -g vercel
vercel login
vercel --prod
```

## ‚úÖ CHECKLIST FINAL

### Funcionalidades Obrigat√≥rias:
- [ ] Pesquisa em 3 etapas funcionando
- [ ] Indicador de progresso (1-2-3) centralizado
- [ ] NPS selector (0-10) com anima√ß√£o para nota 10
- [ ] 6 √°reas de avalia√ß√£o com estrelas
- [ ] Feedback condicional (obrigat√≥rio para notas 1-4 e 5)
- [ ] Dashboard com login (senha: venturini2024)
- [ ] Filtros por data (7, 30, 90 dias, personalizado, este ano)
- [ ] 4 abas: Vis√£o Geral, Timeline, Avalia√ß√£o por √Årea, Pesquisas Recentes
- [ ] Gr√°ficos Recharts (pizza, barras, linha)
- [ ] Exporta√ß√£o CSV
- [ ] Design responsivo
- [ ] Anima√ß√µes Framer Motion

### Performance:
- [ ] Lazy loading implementado
- [ ] Memoiza√ß√£o aplicada
- [ ] Bundle otimizado
- [ ] Images otimizadas

### Banco de Dados:
- [ ] 4 tabelas criadas
- [ ] Relacionamentos configurados
- [ ] √çndices de performance
- [ ] Transa√ß√µes implementadas

## üéØ RESULTADO ESPERADO

Um sistema profissional e completo de feedback com:
- Interface intuitiva para coleta de pesquisas
- Dashboard robusto com an√°lises avan√ßadas
- Performance otimizada e design moderno
- Funcionalidades avan√ßadas (filtros, exporta√ß√£o, anima√ß√µes)
- C√≥digo limpo, documentado e escal√°vel

**Status**: Sistema 100% funcional e testado ‚úÖ
**GitHub**: https://github.com/Gabriel-sv1/projetofeedback.git
**Tecnologias**: Next.js 15, TypeScript, PostgreSQL, Tailwind, Framer Motion, Recharts
